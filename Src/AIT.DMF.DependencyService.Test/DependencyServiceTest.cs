using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace AIT.DMF.DependencyService.Test
{
    /// <summary>
    ///This is a test class for DependencyServiceTest and is intended
    ///to contain all DependencyServiceTest Unit Tests
    ///</summary>
    [TestClass()]
    public class DependencyServiceTest
    {
        private String VALID_TPC_URL = "http://localhost:8080/tfs/DefaultCollection";

        #region # Autogenerated by MSTest
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion
        #endregion

        #region # GetDependencyTypes Test
        /// <summary>
        /// Test for GetDependencyTypes method.
        ///</summary>
        [TestMethod()]
        public void GetDependencyTypesTest()
        {
            //ISettings<ServiceValidSettings> settings = new Settings<ServiceValidSettings>();
            //settings.AddSetting(new KeyValuePair<ServiceValidSettings, string>(ServiceValidSettings.DefaultTeamProjectCollection, VALID_TPC_URL));
            //settings.AddSetting(new KeyValuePair<ServiceValidSettings, string>(ServiceValidSettings.DefaultWorkspaceName, "workspaceName"));
            //settings.AddSetting(new KeyValuePair<ServiceValidSettings, string>(ServiceValidSettings.DefaultWorkspaceOwner, "workspaceOwner"));
            //settings.AddSetting(new KeyValuePair<ServiceValidSettings, string>(ServiceValidSettings.DefaultOutputBaseFolder, "OutputPath"));
            //settings.AddSetting(new KeyValuePair<ServiceValidSettings, string>(ServiceValidSettings.CreateDirectoriesForComponentAndVersion, Boolean.TrueString));
            //settings.AddSetting(new KeyValuePair<ServiceValidSettings, string>(ServiceValidSettings.BinaryTeamProjectCollectionUrl, VALID_TPC_URL));
            //settings.AddSetting(new KeyValuePair<ServiceValidSettings, string>(ServiceValidSettings.BinaryRepositoryTeamProject, "TestProduct"));
            //settings.AddSetting(new KeyValuePair<ServiceValidSettings, string>(ServiceValidSettings.DefaultDependencyDefinitionFilename, "component.targets"));
            //DependencyService target = new DependencyService(settings);
            //IEnumerable<DependencyType> expected = Enum.GetValues(typeof(DependencyType)).OfType<DependencyType>();
            //IEnumerable<DependencyType> actual;

            //actual = target.GetDependencyTypes();
            //Assert.AreEqual(actual.Count(), expected.Count());
            //IEnumerator<DependencyType> actualEnumerator = actual.GetEnumerator();
            //IEnumerator<DependencyType> expectedEnumerator = expected.GetEnumerator();
            //while (actualEnumerator.MoveNext() && expectedEnumerator.MoveNext())
            //{
            //    Assert.AreEqual(actualEnumerator.Current, expectedEnumerator.Current);
            //}
        }
        #endregion
    }
}
